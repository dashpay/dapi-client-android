

buildscript {
    ext.kotlin_version = '1.4.10'
    ext.dashj_version = '0.18-SNAPSHOT'
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.8"
    }
}

plugins {
    id 'maven-publish'
    id 'maven'
    id 'signing'
    id 'java'
}
apply plugin: 'kotlin'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'

allprojects {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}

group 'org.dashj.platform'
version '0.19-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'}
}

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.11.4' }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.28.0' // CURRENT_GRPC_VERSION
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { option 'lite' }
            }

            task.plugins {
                grpc { option 'lite' }
            }
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation 'org.dashj.platform:dpp:0.19-SNAPSHOT'
    implementation "org.dashj:dashj-core:$dashj_version"
    implementation "org.dashj:dashj-merk:0.19-SNAPSHOT"
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'
    implementation 'com.squareup.moshi:moshi:1.11.0'
    implementation 'com.squareup.moshi:moshi-kotlin:1.11.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    testImplementation 'org.assertj:assertj-core:3.10.0'
    testImplementation 'org.mockito:mockito-all:2.0.2-beta'
    testImplementation 'com.squareup.retrofit2:retrofit-mock:2.4.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC1"

     implementation 'io.grpc:grpc-okhttp:1.28.0' // CURRENT_GRPC_VERSION
    implementation('io.grpc:grpc-protobuf-lite:1.28.0') { // CURRENT_GRPC_VERSION
        exclude module: "protobuf-lite"
    }
    implementation 'io.grpc:grpc-stub:1.28.0' // CURRENT_GRPC_VERSION
    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    tasks.withType(Sign)*.enabled = false
    publications {
        maven(MavenPublication) {
            artifact sourcesJar
            from components.java
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

assemble.dependsOn(publishToMavenLocal)

test {
    useJUnitPlatform()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}


signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: project.hasProperty('ossrhUsername')?project.findProperty('ossrhUsername'):'', password: project.hasProperty('ossrhPassword')?project.findProperty('ossrhPassword'):'')
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: project.hasProperty('ossrhUsername')?project.findProperty('ossrhUsername'):'', password: project.hasProperty('ossrhPassword')?project.findProperty('ossrhPassword'):'')
            }

            pom.project {
                name 'DashJ DAPI Client'
                packaging 'jar'
                groupId 'org.dashj.platform'
                artifactId 'dapi-client'
                version '0.19-SNAPSHOT'
                description 'Dash DAPI Client Library'
                url 'https://github.com/dashevo/dapi-client-android'

                scm {
                    connection 'scm:svn:https://github.com/dashevo/dapi-client-android'
                    developerConnection 'scm:svn:https://github.com/dashevo/dapi-client-android'
                    url 'https://github.com/dashevo/dapi-client-android'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'hashengineering'
                        name 'HashEngineering'
                        email 'hashengineeringsolutions@gmail.com'
                    }
                }
            }
        }
    }
}